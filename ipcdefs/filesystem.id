# A partition unique identifier on a disk.
type sunrise_libuser::fs::PartitionId = u32;

# A disk unique identifier.
type sunrise_libuser::fs::DiskId = u32;

# Represent a path in a filesystem.
type sunrise_libuser::fs::FileSystemPath = bytes<0x300>;

# Represent the type of a filesystem.
type sunrise_libuser::fs::FileSystemType = enum<u32> {
    # Represent a FAT12 fileystem.
    FAT12 = 0;
    # Represent a FAT16 fileystem.
    FAT16 = 1;
    # Represent a FAT32 fileystem.
    FAT32 = 2;
    # Represent a PFS0.
    PackageFileSubmission = 3;
};

# Represent the type of a given resource when walking a directory.
type sunrise_libuser::fs::DirectoryEntryType = enum<u8> {
    # The entry is a file.
    Directory = 0;

    # The entry is a directory.
    File = 1;
};

# Represent an entry inside a directory.
type sunrise_libuser::fs::DirectoryEntry = struct {
    # The path of the resource.
    bytes<0x300> path;

    # The attribute of the resource.
    # 1 = Archive bit is set (treat the directory as a file)
    u8 attribute;

    # The type of the resource.
    sunrise_libuser::fs::DirectoryEntryType directory_entry_type;

    # The size of the file. (0 if it's a directory)
    u64 file_size;
};

# Represent the attached timestamps on a given resource.
type sunrise_libuser::fs::FileTimeStampRaw = struct {
    # The resource creation UNIX timestamp.
    u64 creation_timestamp;

    # The resource last modification UNIX timestamp.
    u64 modified_timestamp;

    # The resource last access UNIX timestamp.
    u64 accessed_timestamp;

    # false if one of the given timestamp couldn't have been retrieved.
    bool is_valid;
};

# Entry point of the file system interface.
#
# Allows to interract with various filesytem via IPC.
interface sunrise_libuser::fs::IFileSystemService is fsp-srv {
    # Open a disk partition filesystem.
    # This may fail if no compatible driver is found.
    [5000] open_disk_partition(sunrise_libuser::fs::DiskId disk_id, sunrise_libuser::fs::PartitionId partition_id) -> object<sunrise_libuser::fs::IFileSystem>;

    # Open a disk as a block device.
    # This may fail if no partition table is found.
    [5001] open_disk_storage(sunrise_libuser::fs::DiskId disk_id) -> object<sunrise_libuser::fs::IStorage>;

    # Get the count of disks available.
    [5002] get_disks_count() -> u32 disks_count;

    # Format a disk partition to the given filesystem type.
    [5100] format_disk_partition(sunrise_libuser::fs::DiskId disk_id, sunrise_libuser::fs::PartitionId partition_id, sunrise_libuser::fs::FileSystemType filesystem_type);

    # Initialize a disk partition table
    [5101] initialize_disk(sunrise_libuser::fs::DiskId disk_id);
}

# Represent a filesystem.
interface sunrise_libuser::fs::IFileSystem {
    # Create a file with a given ``size`` at the specified ``path``.
    [0] create_file(u32 mode, u64 size, buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> path);

    # Delete a file at the specified ``path``.
    [1] delete_file(buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> path);

    # Create a directory at the specified ``path``.
    [2] create_directory(buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> path);

    # Delete a directory at the specified ``path``.
    [3] delete_directory(buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> path);

    # Rename a file at ``old_path`` into ``new_path``.
    [5] rename_file(buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> old_path, buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> new_path);

    # Rename a directory at ``old_path`` into ``new_path``
    [6] rename_directory(buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> old_path, buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> new_path);

    # Get the informations about an entry on the filesystem.
    [7] get_entry_type(buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> path) -> sunrise_libuser::fs::DirectoryEntryType;

    # Open a file at the specified ``path`` with the given ``mode`` flags.
    #
    # ``mode`` controls how the file is opened, based on which bits are set:
    # When bit 0 is set, the file is Readable: you can use the Read operation.
    # When bit 1 is set, the file is Writable: you can use the Write operation.
    # When bit 2 is set, the file is Appendable: unless this bit is set, you will not be able to write beyond the end of a file (such writes will result in an error 0x307202)
    [8] open_file(u32 mode, buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> path) -> object<sunrise_libuser::fs::IFile> file;

    # Open a file at the specified ``path`` with the given ``mode`` flags.
    #
    # ``mode`` controls how the file is opened, based on which bits are set:
    # When bit 0 is set, the file is Readable: you can use the Read operation.
    # When bit 1 is set, the file is Writable: you can use the Write operation.
    # When bit 2 is set, the file is Appendable: unless this bit is set, you will not be able to write beyond the end of a file (such writes will result in an error 0x307202)
    [5000] open_file_as_ipipe(u32 mode, buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> path) -> object<sunrise_libuser::twili::IPipe> file;

    # Open a directory at the specified ``path`` with the given ``filter_flags`` flags.
    [9] open_directory(u32 filter_flags, buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> path) -> object<sunrise_libuser::fs::IDirectory> directory;

    # Get the total available space on the given filesystem.
    [11] get_free_space_size(buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> path) -> u64 total_free_space;

    # Get the total size of the filesystem.
    [12] get_total_space_size(buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> path) -> u64 total_size;

    # Return the attached timestamps on a resource at the given ``path``.
    [14] get_file_timestamp_raw(buffer<sunrise_libuser::fs::FileSystemPath, 0x19, 0x300> path) -> sunrise_libuser::fs::FileTimeStampRaw timestamp;

    # Get the type of this filesystem.
    [4000] get_filesystem_type() -> sunrise_libuser::fs::FileSystemType;
}

# This is the interface for a raw device, usually a block device.
interface sunrise_libuser::fs::IStorage {
    # Read the content of a storage at a given ``offset`` in ``out_buf``.
    [0] read(u64 offset, u64 length) -> array<u8, 0x46> out_buf;

    # Write the content given ``in_buf`` at the given ``offset`` in the file.
    [1] write(u64 offset, u64 length, array<u8, 0x45> in_buf);

    # Flush any data not written on the storage.
    [2] flush();

    # Resize the storage with the given ``size``.
    [3] set_size(u64 size);

    # Return the current storage size.
    [4] get_size() -> u64 size;
}

# Represent a directory in a filesystem.
interface sunrise_libuser::fs::IDirectory {
    # Read the next directory entries and return the number of entries read.
    [0] read() -> (u64, array<sunrise_libuser::fs::DirectoryEntry, 0x6>);

    # Return the count of entries in the directory.
    [1] get_entry_count() -> u64;
}

# Represent a file in a filesystem.
interface sunrise_libuser::fs::IFile {
    # Read the content of a file at a given ``offset`` in ``out_buf``. ``option`` should be set to 0.
    [0] read(u32 option, u64 offset, u64 size) -> (u64 out_size, array<u8, 0x46> out_buf);

    # Write the content given ``in_buf`` at the given ``offset`` in the file.
    # If the file is too small to hold the data and the appendable flag is set, it will resize the file and append the data.
    # If the file is too small to hold the data and the appendable flag isn't set, this will return a FileSystemError::NoSpaceLeft.
    # ``option`` should be set to 0.
    [1] write(u32 option, u64 offset, u64 size, array<u8, 0x45> in_buf);

    # Flush any data not written on the filesystem.
    [2] flush();

    # Resize the file with the given ``size``.
    # If the file isn't open with the appendable flag, it will not be extendable and will return a FileSystemError::NoSpaceLeft.
    [3] set_size(u64 size);

    # Return the current file size.
    [4] get_size() -> u64 size;
}
