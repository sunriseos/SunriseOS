initSidebarItems({"constant":[["FRAMES_BITMAP_SIZE","For unit tests we use a much smaller array."],["FRAME_BASE_LOG","The right shift to perform to a Physical address to get its frame id. ``` let phys_address = PhysicalAddress(0xabcde567);"],["FRAME_BASE_MASK","The frame part in [PhysicalAddress]. ``` let phys_address = PhysicalAddress(0xccccc567);"],["FRAME_FREE","In the the bitmap, 1 means the frame is free."],["FRAME_OCCUPIED","In the the bitmap, 0 means the frame is occupied."],["FRAME_OFFSET_MASK","The offset part in a [PhysicalAddress]. ``` let phys_address = PhysicalAddress(0xccccc567);"]],"fn":[["addr_to_frame","Gets the frame number from a physical address"],["frame_to_addr","Gets the physical address from a frame number"],["init","Initialize the [FrameAllocator] by parsing the multiboot information and marking some memory areas as unusable"],["mark_area_free","Marks a physical memory area as free for frame allocation"],["mark_area_reserved","Marks a physical memory area as reserved and will never give it when requesting a frame. This is used to mark where memory holes are, or where the kernel was mapped"],["mark_frame_bootstrap_allocated","Marks a physical memory frame as already allocated Currently used during init when paging marks KernelLand frames as alloc'ed by bootstrap"]],"static":[["FRAME_ALLOCATOR","A physical memory manger to allocate and free memory frames"]],"struct":[["FrameAllocator","The physical memory manager."],["FrameAllocatori386","A frame allocator backed up by a giant bitmap."]]});